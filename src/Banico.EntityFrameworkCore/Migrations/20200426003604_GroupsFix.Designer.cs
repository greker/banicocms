// <auto-generated />
using System;
using Banico.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Banico.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200426003604_GroupsFix")]
    partial class GroupsFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("Banico.Core.Entities.Config", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Module")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tenant")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Configs");

                    b.HasData(
                        new
                        {
                            Id = "f22233d0-5234-479b-8ac2-47759aae149e",
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 4, 26, 0, 36, 3, 482, DateTimeKind.Unspecified).AddTicks(5949), new TimeSpan(0, 0, 0, 0, 0)),
                            Module = "",
                            Name = "initialized",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "n"
                        },
                        new
                        {
                            Id = "ab74929d-9f0f-449d-ba76-8212a2d781ed",
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 4, 26, 0, 36, 3, 484, DateTimeKind.Unspecified).AddTicks(2125), new TimeSpan(0, 0, 0, 0, 0)),
                            Module = "admin",
                            Name = "canActivate",
                            UpdatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Value = "admin"
                        });
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute01")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute02")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute03")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute04")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute05")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute06")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute07")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute08")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute09")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute10")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute11")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute12")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute13")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute14")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute15")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute16")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute17")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute18")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute19")
                        .HasColumnType("TEXT");

                    b.Property<string>("Attribute20")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Module")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SectionItems")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tenant")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("ContentItems");
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentItemReaction", b =>
                {
                    b.Property<string>("ContentItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reaction")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentItemId", "UserId", "Reaction");

                    b.ToTable("ContentItemReaction");
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentItemReactionCount", b =>
                {
                    b.Property<string>("ContentItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reaction")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContentItemId", "Reaction");

                    b.ToTable("ContentItemReactionCount");
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentItemTag", b =>
                {
                    b.Property<string>("ContentItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentItemId", "Tag");

                    b.ToTable("ContentItemTags");
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentSectionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SectionItemId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentItemId");

                    b.HasIndex("SectionItemId");

                    b.ToTable("ContentSectionItems");
                });

            modelBuilder.Entity("Banico.Core.Entities.Follow", b =>
                {
                    b.Property<string>("Follower")
                        .HasColumnType("TEXT");

                    b.Property<string>("Following")
                        .HasColumnType("TEXT");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Banico.Core.Entities.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tenant")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Banico.Core.Entities.Invite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Inviter")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("Banico.Core.Entities.RoleContent", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Write")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleId", "ContentItemId");

                    b.HasIndex("ContentItemId");

                    b.ToTable("RoleContents");
                });

            modelBuilder.Entity("Banico.Core.Entities.RoleId", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RoleId");
                });

            modelBuilder.Entity("Banico.Core.Entities.Section", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modules")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tenant")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Banico.Core.Entities.SectionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChildCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PathName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PathUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tenant")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SectionItems");
                });

            modelBuilder.Entity("Banico.Core.Entities.UserContent", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentItemId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Write")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "ContentItemId");

                    b.HasIndex("ContentItemId");

                    b.ToTable("UserContents");
                });

            modelBuilder.Entity("Banico.Core.Entities.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Banico.Core.Entities.UserId", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserId");
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentItem", b =>
                {
                    b.HasOne("Banico.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentItemReaction", b =>
                {
                    b.HasOne("Banico.Core.Entities.ContentItem", null)
                        .WithMany("ContentItemReactions")
                        .HasForeignKey("ContentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentItemReactionCount", b =>
                {
                    b.HasOne("Banico.Core.Entities.ContentItem", null)
                        .WithMany("ContentItemReactionCounts")
                        .HasForeignKey("ContentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentItemTag", b =>
                {
                    b.HasOne("Banico.Core.Entities.ContentItem", null)
                        .WithMany("ContentItemTags")
                        .HasForeignKey("ContentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banico.Core.Entities.ContentSectionItem", b =>
                {
                    b.HasOne("Banico.Core.Entities.ContentItem", null)
                        .WithMany("ContentSectionItems")
                        .HasForeignKey("ContentItemId");

                    b.HasOne("Banico.Core.Entities.SectionItem", "SectionItem")
                        .WithMany()
                        .HasForeignKey("SectionItemId");
                });

            modelBuilder.Entity("Banico.Core.Entities.RoleContent", b =>
                {
                    b.HasOne("Banico.Core.Entities.ContentItem", "ContentItem")
                        .WithMany("Roles")
                        .HasForeignKey("ContentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Banico.Core.Entities.RoleId", "Role")
                        .WithMany("ContentItems")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banico.Core.Entities.UserContent", b =>
                {
                    b.HasOne("Banico.Core.Entities.ContentItem", "ContentItem")
                        .WithMany("Users")
                        .HasForeignKey("ContentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Banico.Core.Entities.UserId", "User")
                        .WithMany("ContentItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banico.Core.Entities.UserGroup", b =>
                {
                    b.HasOne("Banico.Core.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Banico.Core.Entities.UserId", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
